{"version":3,"sources":["api/api.js","characters/charactersApi.ts","characters/characterActions.js","shared/mvl-pagination/MvlPagination.tsx","shared/mvl-page/MvlPage.tsx","characters/Characters.tsx","comic/comicApi.ts","comic/comicActions.js","comic/Comics.tsx","series/serieApi.ts","series/serieActions.js","series/Series.tsx","auth/authApi.ts","login/Login.tsx","auth/authActions.js","auth/PrivateRoute.tsx","App.tsx","serviceWorker.ts","characters/characterReducer.js","comic/comicReducer.js","series/seriesReducer.js","auth/AuthReducers.js","store/store.js","index.tsx"],"names":["DEFAULT_PARAMS","offset","limit","apikey","getApiUrl","endpoint","get","params","page","Promise","resolve","reject","axios","then","response","data","catch","error","CharactersApi","Api","this","CHARACTERS_ENDPOINT","charactersFetchRequest","type","MvlPagination","total","pagesToShow","onChangePage","pageCount","Math","floor","handlePaginationChange","items","lastPage","number","push","Pagination","Item","key","active","onClick","First","disabled","Prev","Ellipsis","Next","Last","MvlPage","results","fetchData","setPage","title","loading","useEffect","dataList","map","item","Col","className","sm","Card","Img","variant","src","imgSrc","Body","Title","pagination","length","Container","fluid","Row","connect","state","characters","dispatch","fetchCharacters","getData","payload","charactersFetchFailure","message","finally","val","newResults","name","thumbnail","path","extension","comicsFetchRequest","comics","fetchComics","ComicsApi","comicsFetchFailure","SERIES_ENDPOINT","seriesFetchRequest","series","fetchSeries","SeriesApi","seriesFetchFailure","AuthApi","AUTH_ENDPOINT","isAuthenticated","auth","authUser","user","login","localStorage","setItem","JSON","stringify","authLoginSuccess","authLogin","Form","onSubmit","event","preventDefault","target","username","value","password","Group","controlId","Label","Control","required","Button","PrivateRoute","authed","Component","component","rest","render","props","to","stateAuth","logoutUser","logout","removeItem","authLogoutSuccess","nav","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Characters","Series","Comics","Boolean","window","location","hostname","match","INITIAL_STATE","charactersReducer","action","comicsReducer","seriesReducer","getItem","parse","processing","authReducer","reducers","combineReducers","middleware","composeWithDevTools","applyMiddleware","thunk","createLogger","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.31fb119c.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst PUBLIC_API = \"4b762fd5a3572cdc233601d010c607c5\";\n\nconst DEFAULT_PARAMS = {\n  offset: 0,\n  limit: 20,\n  apikey: PUBLIC_API\n};\n\nfunction getApiUrl(endpoint) {\n  return `https://gateway.marvel.com:443/v1/public/${endpoint}`;\n}\n\nfunction get(endpoint, params = {}) {\n  const offset =\n    params.page === 1\n      ? params.page - 1\n      : (params.page - 1) * DEFAULT_PARAMS.limit;\n\n  return new Promise((resolve, reject) => {\n    axios\n      .get(getApiUrl(endpoint), {\n        params: {\n          ...DEFAULT_PARAMS,\n          offset\n        }\n      })\n      .then(response => {\n        resolve(response.data);\n      })\n      .catch(error => {\n        reject(error);\n      });\n  });\n}\n\nexport default {\n  get\n};\n","import Api from \"../api/api\";\n\nexport default class CharactersApi {\n  static CHARACTERS_ENDPOINT = \"characters\";\n  static getData(params: any) {\n    return Api.get(this.CHARACTERS_ENDPOINT, params);\n  }\n}\n","import CharactersApi from \"./charactersApi\";\n\nexport const CHARACTERS_FETCH_REQUEST = \"CHARACTERS_FETCH_REQUEST\";\nexport const CHARACTERS_FETCH_SUCCESS = \"CHARACTERS_FETCH_SUCCESS\";\nexport const CHARACTERS_FETCH_FAILURE = \"CHARACTERS_FETCH_FAILURE\";\nexport const CHARACTERS_FETCH_DONE = \"CHARACTERS_FETCH_DONE\";\nexport const CHARACTERS_SET_PAGE = \"CHARACTERS_SET_PAGE\";\n\nfunction charactersFetchRequest() {\n  return {\n    type: CHARACTERS_FETCH_REQUEST\n  };\n}\n\nfunction charactersFetchSuccess(data) {\n  return {\n    type: CHARACTERS_FETCH_SUCCESS,\n    payload: data\n  };\n}\n\nfunction charactersFetchFailure(error) {\n  return {\n    type: CHARACTERS_FETCH_FAILURE,\n    payload: error\n  };\n}\n\nfunction charactersFetchDone() {\n  return {\n    type: CHARACTERS_FETCH_DONE\n  }\n}\n\nexport function setPage(page) {\n  return {\n    type: CHARACTERS_SET_PAGE,\n    payload: page\n  };\n}\n\nexport function fetchCharacters(page) {\n  return dispatch => {\n    dispatch(charactersFetchRequest);\n\n    CharactersApi.getData({ page })\n      .then(response => {\n        dispatch(charactersFetchSuccess(response.data));\n      })\n      .catch(error => {\n        dispatch(charactersFetchFailure(error.message));\n      })\n      .finally(() => {\n        dispatch(charactersFetchDone());\n      })\n  };\n}\n","\nimport React from \"react\";\nimport Pagination from \"react-bootstrap/Pagination\";\n\nfunction MvlPagination({ page, total, limit, pagesToShow, onChangePage }: any) {\n\n    const pageCount = Math.floor(total / limit);\n\n    const handlePaginationChange = (page: number) => {\n        onChangePage(page);\n    };\n    \n    let items = [];\n    const lastPage =\n    page + pagesToShow - 1 <= pageCount\n        ? page + pagesToShow - 1\n        : pageCount;\n      for (let number = page; number <= lastPage; number++) {\n        items.push(\n          <Pagination.Item\n            key={number}\n            active={number === page}\n            onClick={() => handlePaginationChange(number)}\n          >\n            {number}\n          </Pagination.Item>\n        );\n      }\n    \n    return (\n        <Pagination>\n          <Pagination.First\n            disabled={page === 1}\n            onClick={() => handlePaginationChange(1)}\n          />\n          <Pagination.Prev\n            disabled={page === 1}\n            onClick={() => handlePaginationChange(page - 1)}\n          />\n  \n          <Pagination.Ellipsis\n            disabled={page === 1}\n            onClick={() =>\n              handlePaginationChange(\n                page - pagesToShow > 1 ? page - pagesToShow : 1\n              )\n            }\n          />\n          {items}\n          <Pagination.Ellipsis\n            disabled={page === lastPage}\n            onClick={() =>\n              handlePaginationChange(\n                page + pagesToShow < pageCount\n                  ? page + pagesToShow\n                  : pageCount\n              )\n            }\n          />\n  \n          <Pagination.Next\n            disabled={page === lastPage}\n            onClick={() => handlePaginationChange(page + 1)}\n          />\n          <Pagination.Last\n            disabled={page === lastPage}\n            onClick={() => handlePaginationChange(pageCount)}\n          />\n        </Pagination>\n    );\n}\n\nexport default MvlPagination;\n","import React, { useEffect } from \"react\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\n\nimport MvlPagination from '../mvl-pagination/MvlPagination';\n\nimport './MvlPage.scss';\n\nfunction MvlPage({ results, limit, total, fetchData, page, setPage, loading, title }: any) {\n  useEffect(() => {\n    fetchData(page);\n  }, [fetchData, page]);\n\n  const PAGES_TO_SHOW = 5;\n\n  const dataList =\n    results &&\n    results.map((item: any, key: any) => {\n      return (\n        <Col className=\"CardContainer\" sm={3} key={key}>\n          <Card className=\"Card\">\n            <Card.Img\n              className=\"CardImg\"\n              variant=\"top\"\n              src={item.imgSrc}\n            />\n            <Card.Body>\n              <Card.Title title={item.title} className=\"text-truncate\">{item.title}</Card.Title>\n              {/* <Card.Text>\n                    Some quick example text to build on the card title and make up\n                    the bulk of the card's content.\n                  </Card.Text> */}\n            </Card.Body>\n          </Card>\n        </Col>\n      );\n    });\n\n  const pagination =\n    results && results.length ? (\n      <MvlPagination \n        page={page}\n        total={total}\n        limit={limit}\n        pagesToShow={PAGES_TO_SHOW}\n        onChangePage={setPage}\n        />\n    ) : null;\n\n  return (\n    <Container fluid=\"md\" className=\"MvlPage\">\n      <h2>{title}</h2>\n\n      <Row className=\"p-2\">{dataList}</Row>\n\n      {/* Pagination */}\n      <div className=\"d-flex justify-content-center pt-3\">{pagination}</div>\n    </Container>\n  );\n}\n\nexport default MvlPage;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { fetchCharacters, setPage } from \"./characterActions\";\nimport MvlPage from \"../shared/mvl-page/MvlPage\";\nimport PageListItem from \"../shared/mvl-page/page-list-item.model\";\nimport Character from \"./character.model\";\n\nfunction Characters({ results, limit, total, fetchCharacters, page, setPage, loading }: any) {\n\n  let newResults: PageListItem[] = results.map((item: Character): PageListItem => {\n    return {\n      title: item.name,\n      imgSrc: `${item.thumbnail.path}.${item.thumbnail.extension}`\n    };\n  });\n\n  return (\n    <MvlPage \n      title=\"Characters\"\n      results={newResults}\n      limit={limit}\n      total={total}\n      fetchData={fetchCharacters} \n      setPage={setPage} \n      page={page}>\n    </MvlPage>\n  );\n}\n\nconst mapStateToProps = (state: any) => {\n  state = state.characters;\n  return {\n    results: state.results,\n    total: state.total,\n    limit: state.limit,\n    page: state.page,\n    loading: state.loading\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    fetchCharacters: (page: any) => dispatch(fetchCharacters(page)),\n    setPage: (val: any) => dispatch(setPage(val))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Characters);\n","import Api from \"../api/api\";\n\nexport default class CharactersApi {\n  static CHARACTERS_ENDPOINT = \"comics\";\n  static getData(params: any) {\n    return Api.get(this.CHARACTERS_ENDPOINT, params);\n  }\n}\n","import ComicsApi from \"./comicApi\";\n\nexport const COMICS_FETCH_REQUEST = \"COMICS_FETCH_REQUEST\";\nexport const COMICS_FETCH_SUCCESS = \"COMICS_FETCH_SUCCESS\";\nexport const COMICS_FETCH_FAILURE = \"COMICS_FETCH_FAILURE\";\nexport const COMICS_FETCH_DONE = \"COMICS_FETCH_DONE\";\nexport const COMICS_SET_PAGE = \"COMICS_SET_PAGE\";\n\nfunction comicsFetchRequest() {\n  return {\n    type: COMICS_FETCH_REQUEST\n  };\n}\n\nfunction comicsFetchSuccess(data) {\n  return {\n    type: COMICS_FETCH_SUCCESS,\n    payload: data\n  };\n}\n\nfunction comicsFetchFailure(error) {\n  return {\n    type: COMICS_FETCH_FAILURE,\n    payload: error\n  };\n}\n\nfunction comicsFetchDone() {\n  return {\n    type: COMICS_FETCH_DONE\n  }\n}\n\nexport function setPage(page) {\n  return {\n    type: COMICS_SET_PAGE,\n    payload: page\n  };\n}\n\nexport function fetchComics(page) {\n  return dispatch => {\n    dispatch(comicsFetchRequest);\n\n    ComicsApi.getData({ page })\n      .then(response => { dispatch(comicsFetchSuccess(response.data)); })\n      .catch(error => { dispatch(comicsFetchFailure(error.message)); })\n      .finally(() => { dispatch(comicsFetchDone()); });\n  };\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { fetchComics, setPage } from \"./comicActions\";\nimport MvlPage from \"../shared/mvl-page/MvlPage\";\nimport Comic from \"./comic.model\";\nimport PageListItem from \"../shared/mvl-page/page-list-item.model\";\n\nfunction Comics({ results, limit, total, fetchComics, page, setPage, loading }: any) {\n\n  let newResults: PageListItem[] = results.map((item: Comic): PageListItem => {\n    return {\n      title: item.title,\n      imgSrc: `${item.thumbnail.path}.${item.thumbnail.extension}`\n    };\n  });\n\n  return (\n    <MvlPage \n      title=\"Comics\"\n      results={newResults}\n      limit={limit}\n      total={total}\n      fetchData={fetchComics} \n      setPage={setPage} \n      page={page}>\n    </MvlPage>\n  );\n}\n\nconst mapStateToProps = (state: any) => {\n  state = state.comics;\n  return {\n    results: state.results,\n    total: state.total,\n    limit: state.limit,\n    page: state.page,\n    loading: state.loading\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    fetchComics: (page: any) => dispatch(fetchComics(page)),\n    setPage: (val: any) => dispatch(setPage(val))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Comics);\n","import Api from \"../api/api\";\n\nexport default class CharactersApi {\n  static SERIES_ENDPOINT = \"series\";\n  static getData(params: any) {\n    return Api.get(this.SERIES_ENDPOINT, params);\n  }\n}\n","import SeriesApi from \"./serieApi\";\n\nexport const SERIES_FETCH_REQUEST = \"SERIES_FETCH_REQUEST\";\nexport const SERIES_FETCH_SUCCESS = \"SERIES_FETCH_SUCCESS\";\nexport const SERIES_FETCH_FAILURE = \"SERIES_FETCH_FAILURE\";\nexport const SERIES_FETCH_DONE = \"SERIES_FETCH_DONE\";\nexport const SERIES_SET_PAGE = \"SERIES_SET_PAGE\";\n\nfunction seriesFetchRequest() {\n  return {\n    type: SERIES_FETCH_REQUEST,\n    loading: true\n  };\n}\n\nfunction seriesFetchSuccess(data) {\n  return {\n    type: SERIES_FETCH_SUCCESS,\n    payload: data\n  };\n}\n\nfunction seriesFetchFailure(error) {\n  return {\n    type: SERIES_FETCH_FAILURE,\n    payload: error\n  };\n}\n\nfunction seriesFetchDone() {\n  return {\n    type: SERIES_FETCH_DONE\n  }\n}\n\nexport function setPage(page) {\n  return {\n    type: SERIES_SET_PAGE,\n    payload: page\n  };\n}\n\nexport function fetchSeries(page) {\n  return dispatch => {\n    dispatch(seriesFetchRequest);\n\n    SeriesApi.getData({ page })\n      .then(response => { dispatch(seriesFetchSuccess(response.data)); })\n      .catch(error => { dispatch(seriesFetchFailure(error.message)); })\n      .finally(() => { dispatch(seriesFetchDone()); });\n  };\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { fetchSeries, setPage } from \"./serieActions\";\nimport MvlPage from \"../shared/mvl-page/MvlPage\";\nimport PageListItem from \"../shared/mvl-page/page-list-item.model\";\nimport Serie from \"./serie.model\";\n\nfunction Series({ results, limit, total, fetchSeries, page, setPage, loading }: any) {\n\n  let newResults: PageListItem[] = results.map((item: Serie): PageListItem => {\n    return {\n      title: item.title,\n      imgSrc: `${item.thumbnail.path}.${item.thumbnail.extension}`\n    };\n  });\n\n  return (\n    <MvlPage\n      title=\"Series\"\n      results={newResults}\n      limit={limit}\n      total={total}\n      fetchData={fetchSeries} \n      setPage={setPage} \n      page={page}>\n    </MvlPage>\n  );\n}\n\nconst mapStateToProps = (state: any) => {\n  state = state.series;\n  return {\n    results: state.results,\n    limit: state.limit,\n    total: state.total,\n    page: state.page,\n    loading: state.loading\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    fetchSeries: (page: any) => dispatch(fetchSeries(page)),\n    setPage: (val: any) => dispatch(setPage(val))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Series);\n","\nexport default class AuthApi {\n  static AUTH_ENDPOINT = \"auth\";\n  static login(params: any) {\n    return new Promise((resolve) => {\n        resolve(params);\n    })\n    // return Api.get(this.AUTH_ENDPOINT, params);\n  }\n\n  static logout() {\n    return new Promise((resolve) => {\n        resolve();\n    })\n  }\n}\n","\nimport React, { FormEvent } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { authLogin } from \"../auth/authActions\";\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Container from \"react-bootstrap/Container\";\n\nimport './Login.scss';\n\nfunction Login({authUser}: any) {\n\n    const handleLogin = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n        const target: any = event.target;\n\n        authUser({\n            username: target.username.value,\n            password: target.password.value\n        });\n    }\n\n    return (\n        <Container className=\"Login\" fluid=\"sm\">\n            <div className=\"LoginContent\">\n                <h1 className=\"LoginTitle\">Marvel App</h1>\n                <Form onSubmit={handleLogin} className=\"LoginForm\">\n                    <Form.Group controlId=\"username\">\n                        <Form.Label>Username</Form.Label>\n                        <Form.Control type=\"email\" required />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"password\">\n                        <Form.Label>Password</Form.Label>\n                        <Form.Control type=\"password\" required />\n                    </Form.Group>\n\n                    <Button variant=\"primary\" type=\"submit\">Login</Button>\n                </Form>\n            </div>\n        </Container>\n    );\n}\n\nconst mapPropsToState = (state: any) => {\n    state = state.auth;\n    return {\n        isAuthenticated: state.isAuthenticated\n    };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n    return {\n        authUser: (user: {}) => dispatch(authLogin(user)) \n    };\n}\n\nexport default connect(\n    mapPropsToState,\n    mapDispatchToProps\n)(Login);\n","\nimport AuthApi from './authApi';\n\nexport const AUTH_LOGIN = 'AUTH_LOGIN';\nexport const AUTH_LOGIN_REQUEST = 'AUTH_LOGIN_REQUEST';\nexport const AUTH_LOGIN_SUCCESS = 'AUTH_LOGIN_SUCCESS';\nexport const AUTH_LOGIN_FAILURE = 'AUTH_LOGIN_FAILURE';\nexport const AUTH_LOGIN_DONE = 'AUTH_LOGIN_DONE';\n\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\nexport const AUTH_LOGOUT_REQUEST = 'AUTH_LOGOUT_REQUEST';\nexport const AUTH_LOGOUT_SUCCESS = 'AUTH_LOGOUT_SUCCESS';\nexport const AUTH_LOGOUT_FAILURE = 'AUTH_LOGOUT_FAILURE';\nexport const AUTH_LOGOUT_DONE = 'AUTH_LOGOUT_DONE';\n\n/**\n * ===================================\n * LOGIN\n * ===================================\n */\nfunction authLoginRequest() {\n    return {\n        type: AUTH_LOGIN_REQUEST\n    }\n}\n\nfunction authLoginSuccess(user) {\n    return {\n        type: AUTH_LOGIN_SUCCESS,\n        payload: user\n    }\n}\n\nfunction authLoginFailure() {\n    return {\n        type: AUTH_LOGIN_FAILURE\n    }\n}\n\nfunction authLoginDone() {\n    return {\n        type: AUTH_LOGIN_DONE\n    }\n}\n\nexport function authLogin(user) {\n    return dispatch => {\n        dispatch(authLoginRequest());\n\n        AuthApi.login(user)\n            .then((user) => { \n                localStorage.setItem('jwt_key', JSON.stringify(user));\n                dispatch(authLoginSuccess(user)) \n            })\n            .catch(() => { dispatch(authLoginFailure()) })\n            .finally(() => { dispatch(authLoginDone()) })\n    }\n}\n\n\n/**\n * ===================================\n * LOGOUT\n * ===================================\n */\nfunction authLogoutRequest() {\n    return {\n        type: AUTH_LOGOUT_SUCCESS\n    }\n}\n\nfunction authLogoutSuccess(user) {\n    return {\n        type: AUTH_LOGOUT_SUCCESS,\n        payload: user\n    }\n}\n\nfunction authLogoutFailure() {\n    return {\n        type: AUTH_LOGOUT_FAILURE\n    }\n}\n\nfunction authLogoutDone() {\n    return {\n        type: AUTH_LOGIN_FAILURE\n    }\n}\n\nexport function authLogout() {\n    return dispatch => {\n        dispatch(authLogoutRequest());\n\n        AuthApi.logout()\n            .then((user) => { \n                localStorage.removeItem('jwt_key');\n                dispatch(authLogoutSuccess(user)) \n            })\n            .catch(() => { dispatch(authLogoutFailure()) })\n            .catch(() => { dispatch(authLogoutDone()) })\n    }\n}\n","\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst PrivateRoute = ({authed, component: Component, ...rest}: any) => {\n    return (\n        <Route {...rest} render={(props) => (\n            authed ? \n                <Component {...props} /> : \n                <Redirect to=\"/login\"/>\n        )} />\n    );\n}\n\nexport default PrivateRoute;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Characters from \"./characters/Characters\";\nimport Comics from \"./comic/Comics\";\nimport Series from './series/Series';\nimport Login from \"./login/Login\";\n\nimport \"./App.scss\";\nimport { connect } from \"react-redux\";\nimport { authLogout } from \"./auth/authActions\";\n\nimport PrivateRoute from './auth/PrivateRoute';\n\nimport Button from 'react-bootstrap/Button';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nfunction App({isAuthenticated, logoutUser, user}: any) {\n\n  const handleLogout = () => {\n    logoutUser();\n  }\n\n  const nav = isAuthenticated ? (\n  <div>\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">Marvel API</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link><Link to=\"/\">Characters</Link></Nav.Link>\n          <Nav.Link><Link to=\"/comics\">Comics</Link></Nav.Link>\n          <Nav.Link><Link to=\"/series\">Series</Link></Nav.Link>\n        </Nav>\n\n        <Nav>\n        <div>Hello {user.username}!</div>\n          <Button onClick={handleLogout} variant=\"primary\">Logout</Button>\n        </Nav>\n      </Navbar.Collapse>\n\n\n    </Navbar>\n\n\n\n      <hr/>\n\n    <Switch>\n      <PrivateRoute path=\"/\" component={Characters} authed={isAuthenticated} />\n      <PrivateRoute path=\"/series\" component={Series} authed={isAuthenticated} />\n      <PrivateRoute path=\"/comics\" component={Comics} authed={isAuthenticated} />\n      <Route path=\"/login\">\n        <Login />\n      </Route>\n    </Switch>\n    </div>\n  ) : (\n      <Login />\n  );\n\n  return (\n    <Router>\n      <div className=\"App\">\n        {nav}\n      </div>\n    </Router>\n  );\n}\n\nconst mapPropsToState = (state: any) => {\n  const stateAuth = state.auth;\n  return {\n    isAuthenticated: stateAuth.isAuthenticated,\n    user: stateAuth.user\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    logoutUser: () => dispatch(authLogout())\n  }\n}\n\nexport default connect(\n  mapPropsToState,\n  mapDispatchToProps\n)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHARACTERS_FETCH_REQUEST,\n  CHARACTERS_FETCH_SUCCESS,\n  CHARACTERS_FETCH_FAILURE,\n  CHARACTERS_FETCH_DONE,\n  CHARACTERS_SET_PAGE\n} from \"./characterActions\";\n\nconst INITIAL_STATE = {\n  loading: false,\n  results: [],\n  limit: 0,\n  total: 0,\n  error: null,\n  page: 1\n};\n\nconst charactersReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CHARACTERS_FETCH_REQUEST:\n      state = {\n        ...state,\n        loading: true\n      };\n      break;\n    case CHARACTERS_FETCH_SUCCESS:\n      state = {\n        ...state,\n        results: action.payload.results,\n        limit: action.payload.limit,\n        total: action.payload.total,\n        error: null\n      };\n      break;\n    case CHARACTERS_FETCH_FAILURE:\n      state = {\n        ...state,\n        error: action.payload\n      };\n      break;\n    case CHARACTERS_FETCH_DONE:\n      state = {\n        ...state,\n        loading: false\n      };\n      break;\n    case CHARACTERS_SET_PAGE:\n      state = {\n        ...state,\n        page: action.payload\n      };\n      break;\n    default:\n      break;\n  }\n  return state;\n};\n\nexport default charactersReducer;\n","import {\n    COMICS_FETCH_REQUEST,\n    COMICS_FETCH_SUCCESS,\n    COMICS_FETCH_FAILURE,\n    COMICS_SET_PAGE,\n    COMICS_FETCH_DONE\n  } from \"./comicActions\";\n  \n  const INITIAL_STATE = {\n    loading: false,\n    results: [],\n    limit: 0,\n    total: 0,\n    error: null,\n    page: 1\n  };\n  \n  const comicsReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n      case COMICS_FETCH_REQUEST:\n        state = {\n          ...state,\n          loading: true\n        };\n        break;\n      case COMICS_FETCH_SUCCESS:\n        state = {\n          ...state,\n          results: action.payload.results,\n          limit: action.payload.limit,\n          total: action.payload.total,\n          error: null\n        };\n        break;\n      case COMICS_FETCH_FAILURE:\n        state = {\n          ...state,\n          error: action.payload\n        };\n        break;\n        case COMICS_FETCH_DONE:\n          state = {\n            ...state,\n            loading: false\n          };\n          break;\n      case COMICS_SET_PAGE:\n        state = {\n          ...state,\n          page: action.payload\n        };\n        break;\n      default:\n        break;\n    }\n    return state;\n  };\n  \n  export default comicsReducer;\n  ","import {\n    SERIES_FETCH_REQUEST,\n    SERIES_FETCH_SUCCESS,\n    SERIES_FETCH_FAILURE,\n    SERIES_FETCH_DONE,\n    SERIES_SET_PAGE\n  } from \"./serieActions\";\n  \n  const INITIAL_STATE = {\n    loading: false,\n    results: [],\n    limit: 0,\n    total: 0,\n    error: null,\n    page: 1\n  };\n  \n  const seriesReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n      case SERIES_FETCH_REQUEST:\n        state = {\n          ...state,\n          loading: true\n        };\n        break;\n      case SERIES_FETCH_SUCCESS:\n        state = {\n          ...state,\n          results: action.payload.results,\n          limit: action.payload.results,\n          total: action.payload.total,\n          error: null\n        };\n        break;\n      case SERIES_FETCH_FAILURE:\n        state = {\n          ...state,\n          results: [],\n          limit: 0,\n          total: 0,\n          error: action.payload\n        };\n        break;\n      case SERIES_FETCH_DONE:\n        state = {\n          ...state,\n          loading: false\n        }\n        break;\n      case SERIES_SET_PAGE:\n        state = {\n          ...state,\n          page: action.payload\n        };\n        break;\n      default:\n        break;\n    }\n    return state;\n  };\n  \n  export default seriesReducer;\n  ","\nimport {\n    AUTH_LOGIN_DONE,\n    AUTH_LOGIN_FAILURE,\n    AUTH_LOGIN_REQUEST,\n    AUTH_LOGIN_SUCCESS,\n    AUTH_LOGOUT_DONE,\n    AUTH_LOGOUT_FAILURE,\n    AUTH_LOGOUT_REQUEST,\n    AUTH_LOGOUT_SUCCESS\n} from '../auth/authActions';\n\nconst INITIAL_STATE = {\n    isAuthenticated: !!localStorage.getItem('jwt_key'),\n    user: JSON.parse(localStorage.getItem('jwt_key')),\n    processing: false\n}\n\nconst authReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case AUTH_LOGIN_REQUEST:\n            state = {\n                ...state,\n                processing: true\n            }\n            break;\n        case AUTH_LOGIN_SUCCESS:\n            state = {\n                ...state,\n                isAuthenticated: true,\n                user: action.payload\n            }\n            break;\n        case AUTH_LOGIN_FAILURE:\n            state = {\n                ...state,\n                error: action.payload\n            }\n            break;\n        case AUTH_LOGIN_DONE:\n            state = {\n                ...state,\n                processing: false\n            };\n            break;\n        case AUTH_LOGOUT_REQUEST:\n            state = {\n                ...state,\n                processing: true\n            }\n            break;\n        case AUTH_LOGOUT_SUCCESS:\n            state = {\n                ...state,\n                isAuthenticated: false,\n                user: {}\n            };\n            break;\n        case AUTH_LOGOUT_FAILURE:\n            state = {\n                ...state,\n                error: action.payload\n            }\n            break;\n        case AUTH_LOGOUT_DONE:\n            state = {\n                ...state,\n                processing: false\n            };\n            break;\n        default:\n            // console.error(`${action.type} is not a valid action.`);\n            break;\n    };\n    return state;\n}\n\nexport default authReducer;\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport characters from \"../characters/characterReducer\";\nimport comics from \"../comic/comicReducer\";\nimport series from \"../series/seriesReducer\";\nimport auth from \"../auth/AuthReducers\";\n\nconst reducers = combineReducers({\n  characters,\n  comics,\n  series,\n  auth\n});\n\nconst middleware = composeWithDevTools(applyMiddleware(thunk, createLogger()));\n\nconst store = createStore(reducers, {}, middleware);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport store from \"./store/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}